<Project>

  <!-- DOC: Common calculated properties -->
  <PropertyGroup>
    <DefineConstants Condition="'$(AllowUnsafeBlocks)' == 'true'">$(DefineConstants);UNSAFE</DefineConstants>
    <RuntimeFrameworkVersion Condition="'$(Tfm)' == 'netcoreapp2.0'">2.0.3</RuntimeFrameworkVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <CopyDebugSymbolFilesFromPackages>true</CopyDebugSymbolFilesFromPackages>
    <CopyDocumentationFilesFromPackages>false</CopyDocumentationFilesFromPackages>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.StartsWith('netcoreapp'))">
    <AssetTargetFallback>netstandard2.0</AssetTargetFallback>
    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
    <CopyLocalLockFileAssemblies Condition="'$(IsTestProject)' == 'true'">true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <!-- DOC: Package metadata -->
  <PropertyGroup>
    <!--<Title>Title</Title>-->
    <DescriptionPackageShared>$([System.Text.RegularExpressions.Regex]::Replace($(DescriptionPackageShared), @"(?m)\A\s+|\s+\z|^[ \t\r]+|[ \t\r]+$|[ \t\r]+( )", "$1"))</DescriptionPackageShared>
    <DescriptionPackageSpecific>$([System.Text.RegularExpressions.Regex]::Replace($(DescriptionPackageSpecific), @"(?m)\A\s+|\s+\z|^[ \t\r]+|[ \t\r]+$|[ \t\r]+( )", "$1"))</DescriptionPackageSpecific>
    <Description>$(DescriptionPackageShared)</Description>
    <Description Condition="'$(DescriptionPackageSpecific)' != ''">$(Description)&#13;&#13;$(DescriptionPackageSpecific)</Description>
    <PackageIcon>Icon.png</PackageIcon>
    <PackageReadmeFile>ReadMe.md</PackageReadmeFile>
    <PackageLicenseFile Condition="'$(PackageLicenseExpression)' == ''">License.md</PackageLicenseFile>
    <PackageTags>@(PackageTagItem, ' ')</PackageTags>
  </PropertyGroup>

  <!-- DOC: Resolve System.Text.Json version -->
  <ItemGroup>
    <NuGetAuditSuppress Include="https://github.com/advisories/GHSA-8g4q-xg66-9fp4" Label="System.Text.Json [6, 6.0.9], [8, 8.0.4]" />
    <NuGetAuditSuppress Include="https://github.com/advisories/GHSA-hh2w-p6rv-4g7w" Label="System.Text.Json [7, 8.0.3]" />
  </ItemGroup>

  <Target Name="AddImplicitJsonDefineConstants" BeforeTargets="AddImplicitDefineConstants">
    <PropertyGroup>
      <TargetTextJsonVersion Condition="'$(TargetTextJsonVersion)' == ''">$(TargetTextJsonVersionFallback)</TargetTextJsonVersion>
    </PropertyGroup>
    <!--<Warning Text="$(ProjectName) ($(Tfm)) = JSON v$(TargetTextJsonVersion) [spec=$(IsTextJsonVersionSpecific)]" />-->
    <ItemGroup>
      <TextJsonVersionNumber Include="6;7;8;9;10" />
      <DefineTextJsonConstant Include="@(TextJsonVersionNumber->'JSON%(Identity)_0_OR_GREATER')" Condition="'$(TargetTextJsonVersion)' >= '%(Identity)'" />
    </ItemGroup>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);@(DefineTextJsonConstant)</DefineConstants>
    </PropertyGroup>
    <!--<Warning Text="$(ProjectName) ($(Tfm)) = JSON v$(TargetTextJsonVersion) = $(DefineConstants)" />-->
  </Target>

  <!-- DOC: UseCSharpDynamic property: reference C# DLR for dynamic type -->
  <ItemGroup Condition="'$(UseCSharpDynamic)' == 'true'">
    <Reference Include="Microsoft.CSharp" Condition="'$(TfmId)' == '.NETFramework'" />
    <PackageReference Include="Microsoft.CSharp" Condition="'$(TfmId)' == '.NETStandard'" />
  </ItemGroup>

  <!-- DOC: UsePreReleaseCSharpCompiler property: reference compilers toolset from Roslyn on Azure -->
  <ItemGroup Condition="'$(UsePreReleaseCSharpCompiler)' == 'true'">
    <PackageReference Include="Microsoft.Net.Compilers.Toolset" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
  </ItemGroup>

  <!-- DOC: UseT4 property: Enable T4 service, include T4 scripts and generated files -->
  <ItemGroup Condition="'$(UseT4)' == 'true'">
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
    <None Update="**\*.tt" Generator="TextTemplatingFileGenerator"
        LastGenOutput="%(Filename).g.cs" />
    <Compile Update="**\*.g.cs" DesignTime="True" AutoGen="True"
        DependentUpon="$([System.String]::Copy('%(Filename)').Split('.')[0]).tt" />
  </ItemGroup>

  <!-- DOC: UseJetBrainsAnnotations property: Add JetBrains' attributes -->
  <ItemGroup Condition="'$(UseJetBrainsAnnotations)' == 'true'">
    <PackageReference Include="JetBrains.Annotations" PrivateAssets="all" />
    <Using Include="JetBrains.Annotations" />
    <Using Include="System.Diagnostics.Contracts.PureAttribute" Alias="PureAttribute" />
    <Using Include="System.Diagnostics.CodeAnalysis" />
    <Using Include="System.Diagnostics.CodeAnalysis.NotNullAttribute" Alias="NotNullAttribute" />
  </ItemGroup>

  <!-- DOC: UsePolySharp property: Reference PolySharp and include specified types -->
  <ItemGroup Condition="'$(UsePolySharp)' == 'true'">
    <PackageReference Include="PolySharp" PrivateAssets="all" IncludeAssets="build; analyzers" />
    <PolyInclude Include="@(PolySystem)" FullName="System.%(Identity)" />
    <PolyInclude Include="@(PolyAnalysis)" FullName="System.Diagnostics.CodeAnalysis.%(Identity)" />
    <PolyInclude Include="@(PolyAnalysisAttributes)" FullName="$([System.String]::Copy('System.Diagnostics.CodeAnalysis.%(Identity)Attribute').Replace('0', 'Null').Replace('1', 'NotNull').Replace('W', 'When'))" />
    <PolyInclude Include="@(PolyCompiler)" FullName="System.Runtime.CompilerServices.%(Identity)" />
    <PolyInclude Include="@(PolyCompilerAttributes)" FullName="System.Runtime.CompilerServices.%(Identity)Attribute" />
  </ItemGroup>
  <Target Name="ResolvePolySharpIncludeGeneratedTypes" Condition="@(PolyInclude->Count()) != 0"
      BeforeTargets="ConfigurePolySharpMSBuildProperties">
    <PropertyGroup>
      <PolySharpIncludeGeneratedTypes>$(PolySharpIncludeGeneratedTypes);@(PolyInclude-> '%(FullName)', ',')</PolySharpIncludeGeneratedTypes>
    </PropertyGroup>
  </Target>

  <!-- DOC: SolutionProjectReference item: reference projects with nicer syntax -->
  <ItemGroup>
    <SolutionProjectReference Update="@(SolutionProjectReference)">
      <Module>$([MSBuild]::EnsureTrailingSlash('%(Module)'))</Module>
    </SolutionProjectReference>
    <ProjectReference Include="@(SolutionProjectReference->'$(SolutionDir)%(Module)%(Identity)\%(Identity).%(Type)')" />
  </ItemGroup>

  <!-- DOC: Display configuration items under the Properties project folder -->
  <ItemGroup>
    <None Update="**\*.DotSettings;**\*.user;**\*.props;**\*.targets"
        Link="Properties\$([System.String]::Copy(%(Filename)).Replace($(MSBuildProjectName), ''))%(Extension)" />
    <!--<None Update="*.manifest" Link="Properties\%(Filename)%(Extension)" />-->
  </ItemGroup>

  <!-- DOC: NuGet package -->
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsPackable)' == 'true' and '$(GeneratePackageOnBuild)' == 'true'">
    <!-- DOC: Git metadata -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>

    <!-- DOC: Documentation -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!-- DOC: Symbols package -->
    <IncludeSymbols>true</IncludeSymbols>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludePackageReferencesDuringMarkupCompilation Condition="'$(UseWPF)' == 'true'">true</IncludePackageReferencesDuringMarkupCompilation>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <DebugType>portable</DebugType>

    <!-- DOC: Package compatibility validation -->
    <!--<EnablePackageValidation>true</EnablePackageValidation>
    <PackageValidationBaselineVersion>0.1.0</PackageValidationBaselineVersion>
    <EnableStrictModeForCompatibleTfms>true</EnableStrictModeForCompatibleTfms>-->
  </PropertyGroup>

  <ItemGroup Condition="'$(IsPackable)' == 'true'">
    <SourceRoot Include="$(ProjectDir)/" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="all" />
    <!--<None Include="$(CurrentSolutionDir)*.md" LinkBase=".nuget" Pack="true" PackagePath="/" />-->
    <None Include="@(PackageIconItem)" LinkBase=".nuget" Pack="true" PackagePath="/$(PackageIcon)" />
    <None Include="@(PackageReadmeItem)" LinkBase=".nuget" Pack="true" PackagePath="/$(PackageReadme)" />
    <None Include="@(PackageLicenseItem)" LinkBase=".nuget" Pack="true" PackagePath="/$(PackageLicense)" />
  </ItemGroup>

  <!-- DOC: Continuous integration -->
  <PropertyGroup>
    <!-- <CI Condition="'$(CI)' == ''">false</CI> -->
    <CI Condition="
      ('$(CI)') == 'true' or
      ('$(GITHUB_ACTIONS)' == 'true') or
      ('$(APPVEYOR)' == 'true') or
      ('$(TRAVIS)' == 'true') or
      ('$(TF_BUILD)' == 'true') or
      ('$(CIRCLECI)' == 'true') or
      ('$(CODEBUILD_BUILD_ID)' != '' AND '$(AWS_REGION)' != '') or
      ('$(BUILD_ID)' != '' AND '$(BUILD_URL)' != '') or
      ('$(BUILD_ID)' != '' AND '$(PROJECT_ID)' != '') or
      ('$(TEAMCITY_VERSION)' != '') or
      ('$(JB_SPACE_API_URL)' != '')
    ">true</CI>
  </PropertyGroup>

  <PropertyGroup Condition="'$(CI)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <DeterministicSourcePaths>true</DeterministicSourcePaths>
    <ErrorLog>$(ArtifactsPath)logs/sarif/$(ProjectName)-$(Tfm)-$(Configuration.ToLowerInvariant()).sarif,version=2.1</ErrorLog>
  </PropertyGroup>

  <Target Name="MakeSarifLogsDir" BeforeTargets="Compile">
    <MakeDir Directories="$(ArtifactsPath)logs/sarif/" />
    <MakeDir Directories="$(ArtifactsPath)packages/" />
    <MakeDir Directories="$(ArtifactsPath)test-results/" />
  </Target>

  <!-- DOC: Documentation cleanup -->
  <ItemGroup Label="XML Docs">
    <RemoveXmlDocPrefix Include=":System." />
  </ItemGroup>

  <Target Name="FilterXmlDocs" AfterTargets="Compile"
      Condition="'$(GenerateDocumentationFile)' == 'true' or '$(DocumentationFile)' != ''">
    <XslTransformation
        ContinueOnError="WarnAndContinue"
        XslInputPath="$(SolutionDir).build\FilterXmlDoc.xsl"
        XmlInputPaths="$(DocumentationFile)" OutputPaths="$(DocumentationFile).out"
        Parameters="&lt;Parameter Name='remove-prefixes' Value='@(RemoveXmlDocPrefix)' />" />
    <Move SourceFiles="$(DocumentationFile).out" DestinationFiles="$(DocumentationFile)" />
    <!--<Warning Text="Prefixes in $(DocumentationFile): @(RemoveXmlDocPrefix)" />-->
  </Target>

</Project>