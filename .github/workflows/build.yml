name: Build, Test, Publish
run-name: >-
  ${{
    (github.event_name == 'pull_request' &&
      format('ðŸ”€ PR #{0} ({1}) by @{2}', github.event.number, github.event.pull_request.title, github.actor)) ||
    (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') &&
      format('ðŸ“¦ Release {0} by @{1}', github.ref_name, github.actor)) ||
    (github.event_name == 'push' &&
      format('ðŸ§± Push to {0} by @{1} ({2})', github.ref_name, github.actor, github.event.head_commit.message)) ||
    (github.event_name == 'workflow_dispatch' &&
      format('ðŸ‘Œ Manual run by @{0}', github.actor)) ||
    'Build, Test, Publish'
  }}

on:
  workflow_dispatch:
    inputs:
      publish-myget:
        description: Publish packages to MyGet (auto = on push to main)
        type: choice
        options: [ 'auto', 'yes', 'no' ]
        default: 'auto'
        required: true
      publish-nuget:
        description: Publish packages to NuGet (auto = on push to v* tag)
        type: choice
        options: [ 'auto', 'yes', 'no' ]
        default: 'auto'
        required: true
      publish-log:
        description: Publish MSBuild binary log to artifacts (auto = on build failure)
        type: choice
        options: [ 'auto', 'yes', 'no' ]
        default: 'auto'
        required: true
  push:
    branches:
      - main
      - feature/**
    tags:
      - v*
  pull_request:
    branches:
      - main

env:
  # arguments
  publish_myget: ${{ inputs.publish-myget || 'auto' }}
  publish_nuget: ${{ inputs.publish-nuget || 'auto' }}
  publish_log:   ${{ inputs.publish-log   || 'auto' }}
  # options
  dotnet_test_versions_core: '6 7 8 9 10'
  dotnet_test_versions_win: '462'
  artifacts_dir:    Artifacts
  logs_dir:         Artifacts/logs
  sarif_dir:        Artifacts/logs/sarif
  packages_dir:     Artifacts/packages
  test_results_dir: Artifacts/test-results
  base_nuget_args: --skip-duplicate --force-english-output --timeout 300
  # dotnet options
  SuppressNETCoreSdkPreviewMessage: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  TESTINGPLATFORM_TELEMETRY_OPTOUT: true
  TESTINGPLATFORM_UI_LANGUAGE: en-us

permissions:
  actions: write
  checks: write
  contents: write
  packages: write
  pull-requests: write
  security-events: write
  statuses: write

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version-suffix: ${{ steps.git-version.outputs.version-suffix }}
      release-url:    ${{ steps.git-version.outputs.release-url }}
      release-meta:   ${{ steps.git-version.outputs.release-meta }}
      release-notes:  ${{ steps.git-version.outputs.release-notes }}
      prerelease:     ${{ steps.git-version.outputs.prerelease }}
      build-success:  ${{ steps.next.outputs.build-success }}
      publish-myget:  ${{ steps.next.outputs.publish-myget }}
      publish-nuget:  ${{ steps.next.outputs.publish-nuget }}
      publish-log:    ${{ steps.next.outputs.publish-log }}

    steps:
    - name: Checkout Git repository (deep)
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        filter: tree:0
        submodules: true
        show-progress: false

    - name: Setup environment
      uses: ./.github/actions/setup
      with:
        dotnet-version: 10
        dotnet-runtime: sdk
        ensure-dirs: |-
          ${{ env.sarif_dir }}

    - name: Calculate version properties
      uses: ./.github/actions/git-version
      id: git-version

    - name: Restore NuGet packages
      uses: ./.github/actions/nuget-restore

    - name: Build Debug
      run: >
        dotnet build
        --no-restore
        --configuration Debug
        /bl:${{ env.logs_dir }}/build-debug.binlog

    - name: Build Release & pack
      run: >
        dotnet build
        --no-restore
        --configuration Release
        /p:ReleaseUrl="${{ steps.git-version.outputs.release-url }}"
        /p:ReleaseNotes="${{ steps.git-version.outputs.release-notes }}"
        /p:VersionSuffix="${{ steps.git-version.outputs.version-suffix }}"
        /bl:${{ env.logs_dir }}/build-release.binlog

    - name: 'Upload build artifacts: testing'
      uses: actions/upload-artifact@v4
      with:
        name: testing
        path: |
          ${{ env.artifacts_dir }}/debug*/
          ${{ env.artifacts_dir }}/obj/
          !**/*.resources.dll
          !**/*.xml
          !**/*.cache
          !**/Microsoft.*.pdb
        if-no-files-found: error
        retention-days: 1

    - name: Calculate next steps
      if: always()
      id: next
      run: |
        @{
          'build-success' = $${{ job.status == 'success' }}
          'publish-myget' = Get-AutoOption $env:publish_myget `
            $${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          'publish-nuget' = Get-AutoOption $env:publish_nuget $${{ startsWith(github.ref, 'refs/tags/v') }}
          'publish-log'   = Get-AutoOption $env:publish_log   $${{ job.status == 'failure' }}
        } | ConvertTo-GitHubOutput >> $env:GITHUB_OUTPUT

    - name: 'Upload build artifacts: packages'
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: ${{ env.packages_dir }}/release/
        compression-level: 0
        if-no-files-found: error

    - name: 'Upload build artifacts: logs'
      if: steps.next.outputs.publish-log == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: ${{ env.logs_dir }}/
        compression-level: 0
        if-no-files-found: 'error'

    - name: Merge SARIF reports
      run: >
        dotnet sarif merge
        ${{ env.sarif_dir }}/*.sarif
        --output-directory ${{ env.logs_dir }}
        --output-file build.sarif
        --log "Optimize;Minify"

        Remove-Item -Path '${{ env.sarif_dir }}' -Recurse

    - name: Upload SARIF reports
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ env.logs_dir }}/build.sarif
        category: "/language:csharp/msbuild"

    - name: Dump context
      if: always()
      env:
        github: ${{ toJson(github) }}
        inputs: ${{ toJson(inputs) }}
        job:    ${{ toJson(job) }}
        runner: ${{ toJson(runner) }}
        steps:  ${{ toJson(steps) }}
        vars:   ${{ toJson(vars) }}
      run: ''

    - name: Dump JS context
      if: always()
      uses: actions/github-script@v7
      with:
        script: console.log(JSON.stringify(context, null, "  "))

  test:
    name: Test
    needs: build
    if: always() && needs.build.outputs.build-success == 'true'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    steps:
    - name: Checkout Git repository (shallow)
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
        submodules: true
        show-progress: false

    - name: Setup environment
      uses: ./.github/actions/setup
      if: matrix.os == 'ubuntu-latest'
      with:
        dotnet-version: ${{ env.dotnet_test_versions_core }}
        dotnet-runtime: dotnet

    - name: 'Download build artifacts: testing'
      uses: actions/download-artifact@v4
      with:
        name: testing
        path: ${{ env.artifacts_dir }}/

    - name: Run tests
      run: >
        dotnet test
        --no-restore --no-build
        /p:IsTestRunning=true
        --configuration Debug

    - name: 'Upload build artifacts: test results'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: ${{ env.test_results_dir }}/

  result:
    name: Result
    needs: [ build, test ]
    if: always()
    runs-on: ubuntu-latest
    env:
      success: ${{ needs.build.outputs.build-success == 'true' && needs.test.result == 'success' }}
    steps:
    - name: Checkout Git repository (shallow)
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
        submodules: true
        show-progress: false

    - name: Restore NuGet packages
      uses: ./.github/actions/nuget-restore

    - name: Merge test results
      if: always()
      run: >
        dotnet coverage merge
        ${{ env.test_results_dir }}/*.coverage
        --nologo
        --output ${{ env.test_results_dir }}/combined.cobertura.xml
        --output-format cobertura

    - name: Download packages
      if: env.success == 'true' && (needs.build.outputs.publish-myget == 'true' || needs.build.outputs.publish-nuget == 'true')
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: ${{ env.packages_dir }}/release/

    - name: Publish to MyGet
      if: env.success == 'true' && needs.build.outputs.publish-myget == 'true'
      run: >
        dotnet nuget push
        "${{ env.packages_dir }}/release/*.nupkg"
        --source ${{ vars.MYGET_SOURCE }}
        --api-key ${{ secrets.MYGET_KEY }}
        ${{ env.base_nuget_args}}

    - name: Publish to NuGet
      if: env.success == 'true' && needs.build.outputs.publish-nuget == 'true'
      run: >
        dotnet nuget push
        "${{ env.packages_dir }}/release/*.nupkg"
        --source ${{ vars.NUGET_SOURCE }}
        --api-key ${{ secrets.NUGET_KEY }}
        ${{ env.base_nuget_args}}

    - name: Publish to GitHub Packages NuGet registry
      if: env.success == 'true'
      run: >
        dotnet nuget push
        "${{ env.packages_dir }}/release/*.nupkg"
        --source ${{ vars.GH_NUGET_SOURCE }}
        --api-key ${{ github.token }}
        ${{ env.base_nuget_args}}

    - name: Create GitHub Release
      if: env.success == 'true'
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        prerelease: ${{ needs.build.outputs.prerelease }}
        generate_release_notes: true
        draft: false
        files: |
          ${{ env.packages_dir }}/release/*

    - name: Label PR
      if: env.success == 'false' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          let failure = '${{ needs.test.result }}' == 'failure' ? 'tests' : 'build'
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [ `check:${failure}-failed` ],
          })