<#@   assembly name="System.Core"
#><#+ #nullable enable
#><#+

#pragma warning disable

#if !NETCOREAPP3_0_OR_GREATER && !NET5_0_OR_GREATER

namespace System
{
    using System.Runtime.CompilerServices;

    internal readonly struct Index : IEquatable<Index>
    {
        private readonly int _value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Index(int value, bool fromEnd = false)
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException(nameof(value));
            _value = fromEnd ? ~value : value;
        }

        private Index(int value) => _value = value;

        public static Index Start => new(0);
        public static Index End => new(~0);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Index FromStart(int value)
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException(nameof(value));
            return new(value);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Index FromEnd(int value)
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException(nameof(value));
            return new(~value);
        }

        public int Value => _value < 0 ? ~_value : _value;
        public bool IsFromEnd => _value < 0;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetOffset(int length) => IsFromEnd ? _value + length - 1 : _value;

        public static implicit operator Index(int value) => FromStart(value);

        public bool Equals(Index other) => _value == other._value;
        public override bool Equals(object? other) => other is Index index && index.Equals(other);
        public override int GetHashCode() => _value;
        public override string ToString() => IsFromEnd ? $"{(uint)Value}^" : ((uint)Value).ToString();
    }
}

#endif

#if !NET5_0_OR_GREATER

namespace System.Runtime.CompilerServices
{
    internal static class IsExternalInit;
}

#endif

#>